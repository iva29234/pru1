{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/services/auth/sessions.service.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.session.service.js","app/services/auth/auth.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/navbar/active-menu.directive.js","app/layouts/navbar/active-link.directive.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/entities/pais/pais-dialog.controller.js","app/entities/pais/pais-detail.controller.js","app/entities/pais/pais-delete-dialog.controller.js","app/entities/pais/pais.state.js","app/entities/pais/pais.service.js","app/entities/pais/pais.controller.js","app/entities/entity.state.js","app/entities/ciudad/ciudad-dialog.controller.js","app/entities/ciudad/ciudad-detail.controller.js","app/entities/ciudad/ciudad-delete-dialog.controller.js","app/entities/ciudad/ciudad.state.js","app/entities/ciudad/ciudad.service.js","app/entities/ciudad/ciudad.controller.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/language/language.service.js","app/components/language/language.filter.js","app/components/language/language.controller.js","app/components/language/language.constants.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/handlers/translation.handler.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/translation-storage.provider.js","app/blocks/config/translation.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/logs/logs.state.js","app/admin/logs/logs.service.js","app/admin/logs/logs.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/docs/docs.state.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/admin/admin.state.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/sessions/sessions.state.js","app/account/sessions/sessions.controller.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js","app/app.js"],"names":["run","stateHandler","translationHandler","initialize","angular","module","$inject","User","$resource","service","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","ProfileService","$q","$http","getProfileInfo","isUndefined","dataPromise","then","result","activeProfiles","response","ribbonEnv","inProduction","indexOf","swaggerDisabled","pageRibbon","$rootScope","$translate","linkFunc","scope","element","attrs","addClass","removeClass","directive","replace","restrict","template","link","Sessions","getAll","Register","Principal","Account","authenticate","identity","_identity","_authenticated","hasAnyAuthority","authorities","i","length","hasAuthority","authority","this","_id","when","force","getAccountThen","account","deferred","resolve","getAccountCatch","defer","undefined","isDefined","promise","$promise","isAuthenticated","isIdentityResolved","PasswordResetInit","PasswordResetFinish","Password","setVisible","setHidden","defineVisibility","reset","$watch","split","AuthServerProvider","$localStorage","getToken","token","authenticationToken","hasValidToken","login","credentials","encodeURIComponent","username","password","rememberMe","post","headers","Content-Type","success","logout","Auth","$state","$sessionStorage","LoginService","Activate","activateAccount","key","callback","cb","noop","err","bind","authorize","authThen","toState","parent","name","go","fromState","getPreviousState","previousState","resetPreviousState","params","storePreviousState","toStateParams","open","authReturn","changePassword","newPassword","createAccount","loginThen","use","langKey","refresh","reject","resetPasswordFinish","keyAndPassword","resetPasswordInit","mail","updateAccount","previousStateName","previousStateParams","interceptor","NavbarController","collapseNavbar","toggleNavbar","vm","isNavbarCollapsed","controller","activeMenu","$locale","tmhDynamicLocale","language","selectedLanguage","set","activeLink","clazz","path","href","substring","location","newPath","stateConfig","$stateProvider","state","url","pageTitle","views","content@","templateUrl","mainTranslatePartialLoader","$translatePartialLoader","addPart","config","controllerAs","HomeController","$scope","getAccount","register","$on","PaisDialogController","$timeout","$stateParams","$uibModalInstance","entity","Pais","Ciudad","clear","dismiss","isSaving","pais","id","onSaveSuccess","onSaveError","$emit","close","ciudads","focus","PaisDetailController","unsubscribe","event","PaisDeleteController","confirmDelete","page","value","squash","sort","search","pagingParams","PaginationUtil","parsePage","predicate","parsePredicate","ascending","parseAscending","translatePartialLoader","onEnter","$uibModal","backdrop","size","paisId","paisNombre","reload","resourceUrl","PaisController","ParseLinks","AlertService","paginationConstants","loadAll","reverse","push","onSuccess","links","parse","totalItems","queryCount","onError","error","message","itemsPerPage","loadPage","transition","transitionTo","$current","currentSearch","abstract","CiudadDialogController","DataUtils","ciudad","openCalendar","date","datePickerOpenStatus","byteSize","openFile","fecha","setImagen","$file","$error","toBase64","base64Data","$apply","imagen","imagenContentType","type","fechaHora","setMuscia","muscia","musciaContentType","setArchivo","archivo","archivoContentType","CiudadDetailController","CiudadDeleteController","nombre","cantidad","ano","numDecimal","flotante","numDoble","checkBox","estados","DateUtils","convertLocalDateFromServer","convertDateTimeFromServer","transformRequest","convertLocalDateToServer","toJson","CiudadController","words","wordsFilter","input","isNaN","inputWords","slice","join","filter","characters","charactersFilter","chars","breakOnWord","charAt","substr","lastspace","lastIndexOf","jhSortBy","parentCtrl","require","jhSort","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","triggerApply","values","$watchGroup","header","Error","parts","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","isString","parseInt","sortArray","pop","jhiItemCount","bindings","component","$filter","Date","dateString","dateformat","$window","abbreviate","text","base64String","endsWith","suffix","str","paddingSize","formatAsBytes","toString","file","fileReader","FileReader","readAsDataURL","onload","e","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","enc1","enc2","enc3","output","chr3","enc4","charCodeAt","keyStr","decode","String","fromCharCode","modalInstance","animation","resetModal","LoginController","cancel","authenticationError","preventDefault","current","$broadcast","requestResetPassword","JhiLanguageService","LANGUAGES","getCurrent","storage","findLanguageFromKey","findLanguageFromKeyFilter","lang","ca","cs","da","de","el","en","es","fr","gl","hu","hi","it","ja","ko","mr","nl","pl","pt-br","pt-pt","ro","ru","sk","sv","ta","tr","zh-cn","zh-tw","JhiLanguageController","changeLanguage","languageKey","languages","constant","showValidation","each","$formGroup","$inputs","$input","hasClass","isInvalid","toggleClass","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertErrorController","addErrorAlert","alerts","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","status","errorHeader","entityKey","entityName","instant","fieldErrors","fieldError","convertedField","fieldName","objectName","jhiAlertError","getService","$sce","position","warning","info","alertOptions","alert","trustAsHtml","alertId","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","map","index","splice","$get","showAsToast","provider","jhiAlertController","jhiAlert","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","authExpiredInterceptor","$injector","$document","to","getCSRF","afterCSRFRenewed","doc","cookie","c","oldResponse","translateChangeSuccess","updateTitle","titleKey","title","document","VERSION","stateChangeStart","external","stateChangeSuccess","toParams","fromParams","paginationConfig","uibPaginationConfig","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","translationStorageProvider","$cookies","$log","getObject","putObject","put","translationConfig","$translateProvider","tmhDynamicLocaleProvider","useLoader","urlTemplate","preferredLanguage","useStorage","useSanitizeValueStrategy","addInterpolation","localeLocationPattern","useCookieStorage","storageKey","localStorageConfig","$localStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","defaults","xsrfCookieName","xsrfHeaderName","setMatchlist","otherwise","interceptors","val","equals","a","b","is","pattern","compileServiceConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","user","UserManagementDetailController","load","UserManagementDeleteController","firstName","lastName","email","activated","createdBy","createdDate","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","users","setActive","isActivated","editForm","$setPristine","$setUntouched","currentAccount","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","JhiMetricsMonitoringController","updatingMetrics","metrics","refreshThreadDumpData","cachesStats","servicesStats","newValue","timers","newKey","LogsService","findAll","changeLevel","LogsController","level","loggers","JhiHealthService","checkHealth","transformHealthData","flattenHealthData","getBaseName","getSubSystemName","remainder","isHealthObject","hasSubSystem","addHealthObject","getModuleName","isLeaf","healthObject","healthData","details","hasDetails","extend","separator","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","statusState","updatingHealth","showHealth","health","JhiConfigurationService","getConfigPropsComplete","properties","orderBy","getEnv","getEnvComplete","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","onChangeDate","dateFormat","audits","today","getFullYear","getMonth","getDate","previousMonth","SettingsController","settingsAccount","copyAccount","SessionsController","invalidate","series","sessions","RequestResetController","requestReset","errorEmailNotExists","resetAccount","ResetFinishController","finishReset","doNotMatch","confirmPassword","keyMissing","RegisterController","registerAccount","errorUserExists","errorEmailExists","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","$","grep","Math","min","getColor","s","idx","col","children","css","background-color","passwordToCheck","PasswordController","ActivationController","$templateCache"],"mappings":"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","file":"app/app-3523a9e65e.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('pru1App', [\n            'ngStorage', \n            'tmh.dynamicLocale',\n            'pascalprecht.translate', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$q', '$http'];\n\n    function ProfileService($q, $http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerDisabled = result.data.activeProfiles.indexOf(\"no-swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope', '$translate'];\n\n    function pageRibbon(ProfileService, $rootScope, $translate) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" translate=\"global.ribbon.{{ribbonEnv}}\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account!== null) {\n                        $translate.use(account.langKey).then(function () {\n                            $translate.refresh();\n                        });\n                    }\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerDisabled = response.swaggerDisabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('activeMenu', activeMenu);\n\n    activeMenu.$inject = ['$translate', '$locale', 'tmhDynamicLocale'];\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                    $translatePartialLoader.addPart('home');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisDialogController', PaisDialogController);\n\n    PaisDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Pais', 'Ciudad'];\n\n    function PaisDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Pais, Ciudad) {\n        var vm = this;\n\n        vm.pais = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.ciudads = Ciudad.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.pais.id !== null) {\n                Pais.update(vm.pais, onSaveSuccess, onSaveError);\n            } else {\n                Pais.save(vm.pais, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('pru1App:paisUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisDetailController', PaisDetailController);\n\n    PaisDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Pais', 'Ciudad'];\n\n    function PaisDetailController($scope, $rootScope, $stateParams, entity, Pais, Ciudad) {\n        var vm = this;\n\n        vm.pais = entity;\n\n        var unsubscribe = $rootScope.$on('pru1App:paisUpdate', function(event, result) {\n            vm.pais = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisDeleteController',PaisDeleteController);\n\n    PaisDeleteController.$inject = ['$uibModalInstance', 'entity', 'Pais'];\n\n    function PaisDeleteController($uibModalInstance, entity, Pais) {\n        var vm = this;\n\n        vm.pais = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Pais.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('pais', {\n            parent: 'entity',\n            url: '/pais?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.pais.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pais/pais.html',\n                    controller: 'PaisController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('pais');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('pais-detail', {\n            parent: 'entity',\n            url: '/pais/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.pais.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pais/pais-detail.html',\n                    controller: 'PaisDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('pais');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Pais', function($stateParams, Pais) {\n                    return Pais.get({id : $stateParams.id}).$promise;\n                }]\n            }\n        })\n        .state('pais.new', {\n            parent: 'pais',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pais/pais-dialog.html',\n                    controller: 'PaisDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                paisId: null,\n                                paisNombre: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('pais', null, { reload: true });\n                }, function() {\n                    $state.go('pais');\n                });\n            }]\n        })\n        .state('pais.edit', {\n            parent: 'pais',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pais/pais-dialog.html',\n                    controller: 'PaisDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Pais', function(Pais) {\n                            return Pais.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pais', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('pais.delete', {\n            parent: 'pais',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pais/pais-delete-dialog.html',\n                    controller: 'PaisDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Pais', function(Pais) {\n                            return Pais.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pais', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('pru1App')\n        .factory('Pais', Pais);\n\n    Pais.$inject = ['$resource'];\n\n    function Pais ($resource) {\n        var resourceUrl =  'api/pais/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisController', PaisController);\n\n    PaisController.$inject = ['$scope', '$state', 'Pais', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function PaisController ($scope, $state, Pais, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        \n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n\n        loadAll();\n\n        function loadAll () {\n            Pais.query({\n                page: pagingParams.page - 1,\n                size: paginationConstants.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.pais = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadDialogController', CiudadDialogController);\n\n    CiudadDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Ciudad', 'Pais'];\n\n    function CiudadDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Ciudad, Pais) {\n        var vm = this;\n\n        vm.ciudad = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.byteSize = DataUtils.byteSize;\n        vm.openFile = DataUtils.openFile;\n        vm.save = save;\n        vm.pais = Pais.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.ciudad.id !== null) {\n                Ciudad.update(vm.ciudad, onSaveSuccess, onSaveError);\n            } else {\n                Ciudad.save(vm.ciudad, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('pru1App:ciudadUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.fecha = false;\n\n        vm.setImagen = function ($file, ciudad) {\n            if ($file && $file.$error === 'pattern') {\n                return;\n            }\n            if ($file) {\n                DataUtils.toBase64($file, function(base64Data) {\n                    $scope.$apply(function() {\n                        ciudad.imagen = base64Data;\n                        ciudad.imagenContentType = $file.type;\n                    });\n                });\n            }\n        };\n        vm.datePickerOpenStatus.fechaHora = false;\n\n        vm.setMuscia = function ($file, ciudad) {\n            if ($file) {\n                DataUtils.toBase64($file, function(base64Data) {\n                    $scope.$apply(function() {\n                        ciudad.muscia = base64Data;\n                        ciudad.musciaContentType = $file.type;\n                    });\n                });\n            }\n        };\n\n        vm.setArchivo = function ($file, ciudad) {\n            if ($file) {\n                DataUtils.toBase64($file, function(base64Data) {\n                    $scope.$apply(function() {\n                        ciudad.archivo = base64Data;\n                        ciudad.archivoContentType = $file.type;\n                    });\n                });\n            }\n        };\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadDetailController', CiudadDetailController);\n\n    CiudadDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'DataUtils', 'entity', 'Ciudad', 'Pais'];\n\n    function CiudadDetailController($scope, $rootScope, $stateParams, DataUtils, entity, Ciudad, Pais) {\n        var vm = this;\n\n        vm.ciudad = entity;\n        vm.byteSize = DataUtils.byteSize;\n        vm.openFile = DataUtils.openFile;\n\n        var unsubscribe = $rootScope.$on('pru1App:ciudadUpdate', function(event, result) {\n            vm.ciudad = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadDeleteController',CiudadDeleteController);\n\n    CiudadDeleteController.$inject = ['$uibModalInstance', 'entity', 'Ciudad'];\n\n    function CiudadDeleteController($uibModalInstance, entity, Ciudad) {\n        var vm = this;\n\n        vm.ciudad = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Ciudad.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('ciudad', {\n            parent: 'entity',\n            url: '/ciudad',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.ciudad.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/ciudad/ciudads.html',\n                    controller: 'CiudadController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('ciudad');\n                    $translatePartialLoader.addPart('estado');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('ciudad-detail', {\n            parent: 'entity',\n            url: '/ciudad/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.ciudad.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/ciudad/ciudad-detail.html',\n                    controller: 'CiudadDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('ciudad');\n                    $translatePartialLoader.addPart('estado');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Ciudad', function($stateParams, Ciudad) {\n                    return Ciudad.get({id : $stateParams.id}).$promise;\n                }]\n            }\n        })\n        .state('ciudad.new', {\n            parent: 'ciudad',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/ciudad/ciudad-dialog.html',\n                    controller: 'CiudadDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                nombre: null,\n                                cantidad: null,\n                                ano: null,\n                                numDecimal: null,\n                                flotante: null,\n                                numDoble: null,\n                                checkBox: null,\n                                fecha: null,\n                                imagen: null,\n                                imagenContentType: null,\n                                fechaHora: null,\n                                muscia: null,\n                                musciaContentType: null,\n                                archivo: null,\n                                archivoContentType: null,\n                                estados: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('ciudad', null, { reload: true });\n                }, function() {\n                    $state.go('ciudad');\n                });\n            }]\n        })\n        .state('ciudad.edit', {\n            parent: 'ciudad',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/ciudad/ciudad-dialog.html',\n                    controller: 'CiudadDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Ciudad', function(Ciudad) {\n                            return Ciudad.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('ciudad', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('ciudad.delete', {\n            parent: 'ciudad',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/ciudad/ciudad-delete-dialog.html',\n                    controller: 'CiudadDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Ciudad', function(Ciudad) {\n                            return Ciudad.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('ciudad', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('pru1App')\n        .factory('Ciudad', Ciudad);\n\n    Ciudad.$inject = ['$resource', 'DateUtils'];\n\n    function Ciudad ($resource, DateUtils) {\n        var resourceUrl =  'api/ciudads/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.fecha = DateUtils.convertLocalDateFromServer(data.fecha);\n                        data.fechaHora = DateUtils.convertDateTimeFromServer(data.fechaHora);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.fecha = DateUtils.convertLocalDateToServer(data.fecha);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.fecha = DateUtils.convertLocalDateToServer(data.fecha);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadController', CiudadController);\n\n    CiudadController.$inject = ['$scope', '$state', 'DataUtils', 'Ciudad', 'ParseLinks', 'AlertService'];\n\n    function CiudadController ($scope, $state, DataUtils, Ciudad, ParseLinks, AlertService) {\n        var vm = this;\n        \n        vm.ciudads = [];\n        vm.loadPage = loadPage;\n        vm.page = 0;\n        vm.predicate = 'id';\n        vm.reset = reset;\n        vm.reverse = true;\n        vm.openFile = DataUtils.openFile;\n        vm.byteSize = DataUtils.byteSize;\n\n        loadAll();\n\n        function loadAll () {\n            Ciudad.query({\n                page: vm.page,\n                size: 20,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                for (var i = 0; i < data.length; i++) {\n                    vm.ciudads.push(data[i]);\n                }\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function reset () {\n            vm.page = 0;\n            vm.ciudads = [];\n            loadAll();\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            loadAll();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse (header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function (p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if( angular.isString(page) ) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page-1) * 20)==0 ? 1:(($ctrl.page-1) * 20 + 1)}} - ' +\n                    '{{($ctrl.page * 20) < $ctrl.queryCount ? ($ctrl.page * 20) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total'\n        }\n    };\n\n    angular\n        .module('pru1App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n            }\n            return input.substring(0, 1).toUpperCase() + input.substring(1);\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is succesful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'cs': 'Český',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sk': 'Slovenský',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'es',\n            'ca',\n            'en'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        scope.$watch(function() {\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('pru1App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key && key !== null ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('pru1App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-pru1App-error');\n                var entityKey = httpResponse.headers('X-pru1App-params');\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('pru1App.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('pru1App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-pru1App-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-pru1App-params')});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('pru1App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$document'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $document) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            } else if (response.status === 403 && response.config.method !== 'GET' && getCSRF() === '') {\n                // If the CSRF token expired, then try to get a new CSRF token and retry the old request\n                var $http = $injector.get('$http');\n                return $http.get('/').finally(function() { return afterCSRFRenewed(response); });\n            }\n            return $q.reject(response);\n        }\n\n        function getCSRF() {\n            var doc = $document[0];\n            if (doc) {\n                var name = 'CSRF-TOKEN=';\n                var ca = doc.cookie.split(';');\n                for (var i = 0; i < ca.length; i++) {\n                    var c = ca[i];\n                    while (c.charAt(0) === ' ') {c = c.substring(1);}\n\n                    if (c.indexOf(name) !== -1) {\n                        return c.substring(name.length, c.length);\n                    }\n                }\n            }\n            return '';\n        }\n\n        function afterCSRFRenewed(oldResponse) {\n            if (getCSRF() !== '') {\n                // retry the old request after the new CSRF-TOKEN is obtained\n                var $http = $injector.get('$http');\n                return $http(oldResponse.config);\n            } else {\n                // unlikely get here but reject with the old response any way and avoid infinite loop\n                return $q.reject(oldResponse);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precendence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage', '$translate', 'JhiLanguageService', 'translationHandler', '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage, $translate, JhiLanguageService, translationHandler, $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to prefered language \"es\"');\n                $cookies.putObject(name, 'es');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('es');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider'];\n\n    function localStorageConfig($localStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //enable CSRF\n        $httpProvider.defaults.xsrfCookieName = 'CSRF-TOKEN';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRF-TOKEN';\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n        \n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('pru1App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.links = null;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.page = 1;\n        vm.setActive = setActive;\n        vm.totalItems = null;\n        vm.users = [];\n\n\n        vm.loadAll();\n\n        \n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n\n        function loadAll () {\n            User.query({page: vm.page - 1, size: paginationConstants.itemsPerPage}, function (result, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n\n                //hide anonymous user from user management: it's a required user for Spring Security\n                for(var i in result) {\n                    if(result[i]['login'] === 'anonymoususer') {\n                        result.splice(i,1);\n                    }\n                }\n                vm.users = result;\n            });\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.loadAll();\n        }\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n            vm.editForm.$setPristine();\n            vm.editForm.$setUntouched();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'metrics.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('metrics');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/jhipster/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    index = newKey.lastIndexOf('.');\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(index + 1),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'logs.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('logs');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/jhipster/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'health.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('health');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('pru1App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'configuration.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('configuration');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'audits.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audits');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/jhipster/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('settings');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController (Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function(current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('sessions');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx = 0;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('password');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('pru1App', [\n            'ngStorage', \n            'tmh.dynamicLocale',\n            'pascalprecht.translate', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$q', '$http'];\n\n    function ProfileService($q, $http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerDisabled = result.data.activeProfiles.indexOf(\"no-swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope', '$translate'];\n\n    function pageRibbon(ProfileService, $rootScope, $translate) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" translate=\"global.ribbon.{{ribbonEnv}}\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account!== null) {\n                        $translate.use(account.langKey).then(function () {\n                            $translate.refresh();\n                        });\n                    }\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerDisabled = response.swaggerDisabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('activeMenu', activeMenu);\n\n    activeMenu.$inject = ['$translate', '$locale', 'tmhDynamicLocale'];\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                    $translatePartialLoader.addPart('home');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisDialogController', PaisDialogController);\n\n    PaisDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Pais', 'Ciudad'];\n\n    function PaisDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Pais, Ciudad) {\n        var vm = this;\n\n        vm.pais = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.ciudads = Ciudad.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.pais.id !== null) {\n                Pais.update(vm.pais, onSaveSuccess, onSaveError);\n            } else {\n                Pais.save(vm.pais, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('pru1App:paisUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisDetailController', PaisDetailController);\n\n    PaisDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Pais', 'Ciudad'];\n\n    function PaisDetailController($scope, $rootScope, $stateParams, entity, Pais, Ciudad) {\n        var vm = this;\n\n        vm.pais = entity;\n\n        var unsubscribe = $rootScope.$on('pru1App:paisUpdate', function(event, result) {\n            vm.pais = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisDeleteController',PaisDeleteController);\n\n    PaisDeleteController.$inject = ['$uibModalInstance', 'entity', 'Pais'];\n\n    function PaisDeleteController($uibModalInstance, entity, Pais) {\n        var vm = this;\n\n        vm.pais = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Pais.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('pais', {\n            parent: 'entity',\n            url: '/pais?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.pais.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pais/pais.html',\n                    controller: 'PaisController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('pais');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('pais-detail', {\n            parent: 'entity',\n            url: '/pais/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.pais.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pais/pais-detail.html',\n                    controller: 'PaisDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('pais');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Pais', function($stateParams, Pais) {\n                    return Pais.get({id : $stateParams.id}).$promise;\n                }]\n            }\n        })\n        .state('pais.new', {\n            parent: 'pais',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pais/pais-dialog.html',\n                    controller: 'PaisDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                paisId: null,\n                                paisNombre: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('pais', null, { reload: true });\n                }, function() {\n                    $state.go('pais');\n                });\n            }]\n        })\n        .state('pais.edit', {\n            parent: 'pais',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pais/pais-dialog.html',\n                    controller: 'PaisDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Pais', function(Pais) {\n                            return Pais.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pais', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('pais.delete', {\n            parent: 'pais',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pais/pais-delete-dialog.html',\n                    controller: 'PaisDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Pais', function(Pais) {\n                            return Pais.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pais', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('pru1App')\n        .factory('Pais', Pais);\n\n    Pais.$inject = ['$resource'];\n\n    function Pais ($resource) {\n        var resourceUrl =  'api/pais/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PaisController', PaisController);\n\n    PaisController.$inject = ['$scope', '$state', 'Pais', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function PaisController ($scope, $state, Pais, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        \n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n\n        loadAll();\n\n        function loadAll () {\n            Pais.query({\n                page: pagingParams.page - 1,\n                size: paginationConstants.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.pais = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadDialogController', CiudadDialogController);\n\n    CiudadDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Ciudad', 'Pais'];\n\n    function CiudadDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Ciudad, Pais) {\n        var vm = this;\n\n        vm.ciudad = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.byteSize = DataUtils.byteSize;\n        vm.openFile = DataUtils.openFile;\n        vm.save = save;\n        vm.pais = Pais.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.ciudad.id !== null) {\n                Ciudad.update(vm.ciudad, onSaveSuccess, onSaveError);\n            } else {\n                Ciudad.save(vm.ciudad, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('pru1App:ciudadUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.fecha = false;\n\n        vm.setImagen = function ($file, ciudad) {\n            if ($file && $file.$error === 'pattern') {\n                return;\n            }\n            if ($file) {\n                DataUtils.toBase64($file, function(base64Data) {\n                    $scope.$apply(function() {\n                        ciudad.imagen = base64Data;\n                        ciudad.imagenContentType = $file.type;\n                    });\n                });\n            }\n        };\n        vm.datePickerOpenStatus.fechaHora = false;\n\n        vm.setMuscia = function ($file, ciudad) {\n            if ($file) {\n                DataUtils.toBase64($file, function(base64Data) {\n                    $scope.$apply(function() {\n                        ciudad.muscia = base64Data;\n                        ciudad.musciaContentType = $file.type;\n                    });\n                });\n            }\n        };\n\n        vm.setArchivo = function ($file, ciudad) {\n            if ($file) {\n                DataUtils.toBase64($file, function(base64Data) {\n                    $scope.$apply(function() {\n                        ciudad.archivo = base64Data;\n                        ciudad.archivoContentType = $file.type;\n                    });\n                });\n            }\n        };\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadDetailController', CiudadDetailController);\n\n    CiudadDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'DataUtils', 'entity', 'Ciudad', 'Pais'];\n\n    function CiudadDetailController($scope, $rootScope, $stateParams, DataUtils, entity, Ciudad, Pais) {\n        var vm = this;\n\n        vm.ciudad = entity;\n        vm.byteSize = DataUtils.byteSize;\n        vm.openFile = DataUtils.openFile;\n\n        var unsubscribe = $rootScope.$on('pru1App:ciudadUpdate', function(event, result) {\n            vm.ciudad = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadDeleteController',CiudadDeleteController);\n\n    CiudadDeleteController.$inject = ['$uibModalInstance', 'entity', 'Ciudad'];\n\n    function CiudadDeleteController($uibModalInstance, entity, Ciudad) {\n        var vm = this;\n\n        vm.ciudad = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Ciudad.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('ciudad', {\n            parent: 'entity',\n            url: '/ciudad',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.ciudad.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/ciudad/ciudads.html',\n                    controller: 'CiudadController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('ciudad');\n                    $translatePartialLoader.addPart('estado');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('ciudad-detail', {\n            parent: 'entity',\n            url: '/ciudad/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'pru1App.ciudad.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/ciudad/ciudad-detail.html',\n                    controller: 'CiudadDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('ciudad');\n                    $translatePartialLoader.addPart('estado');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Ciudad', function($stateParams, Ciudad) {\n                    return Ciudad.get({id : $stateParams.id}).$promise;\n                }]\n            }\n        })\n        .state('ciudad.new', {\n            parent: 'ciudad',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/ciudad/ciudad-dialog.html',\n                    controller: 'CiudadDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                nombre: null,\n                                cantidad: null,\n                                ano: null,\n                                numDecimal: null,\n                                flotante: null,\n                                numDoble: null,\n                                checkBox: null,\n                                fecha: null,\n                                imagen: null,\n                                imagenContentType: null,\n                                fechaHora: null,\n                                muscia: null,\n                                musciaContentType: null,\n                                archivo: null,\n                                archivoContentType: null,\n                                estados: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('ciudad', null, { reload: true });\n                }, function() {\n                    $state.go('ciudad');\n                });\n            }]\n        })\n        .state('ciudad.edit', {\n            parent: 'ciudad',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/ciudad/ciudad-dialog.html',\n                    controller: 'CiudadDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Ciudad', function(Ciudad) {\n                            return Ciudad.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('ciudad', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('ciudad.delete', {\n            parent: 'ciudad',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/ciudad/ciudad-delete-dialog.html',\n                    controller: 'CiudadDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Ciudad', function(Ciudad) {\n                            return Ciudad.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('ciudad', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('pru1App')\n        .factory('Ciudad', Ciudad);\n\n    Ciudad.$inject = ['$resource', 'DateUtils'];\n\n    function Ciudad ($resource, DateUtils) {\n        var resourceUrl =  'api/ciudads/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.fecha = DateUtils.convertLocalDateFromServer(data.fecha);\n                        data.fechaHora = DateUtils.convertDateTimeFromServer(data.fechaHora);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.fecha = DateUtils.convertLocalDateToServer(data.fecha);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.fecha = DateUtils.convertLocalDateToServer(data.fecha);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('CiudadController', CiudadController);\n\n    CiudadController.$inject = ['$scope', '$state', 'DataUtils', 'Ciudad', 'ParseLinks', 'AlertService'];\n\n    function CiudadController ($scope, $state, DataUtils, Ciudad, ParseLinks, AlertService) {\n        var vm = this;\n        \n        vm.ciudads = [];\n        vm.loadPage = loadPage;\n        vm.page = 0;\n        vm.predicate = 'id';\n        vm.reset = reset;\n        vm.reverse = true;\n        vm.openFile = DataUtils.openFile;\n        vm.byteSize = DataUtils.byteSize;\n\n        loadAll();\n\n        function loadAll () {\n            Ciudad.query({\n                page: vm.page,\n                size: 20,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                for (var i = 0; i < data.length; i++) {\n                    vm.ciudads.push(data[i]);\n                }\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function reset () {\n            vm.page = 0;\n            vm.ciudads = [];\n            loadAll();\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            loadAll();\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n;\n(function(){\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse (header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function (p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if( angular.isString(page) ) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n\n            return links;\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page-1) * 20)==0 ? 1:(($ctrl.page-1) * 20 + 1)}} - ' +\n                    '{{($ctrl.page * 20) < $ctrl.queryCount ? ($ctrl.page * 20) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total'\n        }\n    };\n\n    angular\n        .module('pru1App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n            }\n            return input.substring(0, 1).toUpperCase() + input.substring(1);\n        }\n    }\n})();\n;\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is succesful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'cs': 'Český',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sk': 'Slovenský',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'es',\n            'ca',\n            'en'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        scope.$watch(function() {\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('pru1App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key && key !== null ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('pru1App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-pru1App-error');\n                var entityKey = httpResponse.headers('X-pru1App-params');\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('pru1App.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('pru1App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-pru1App-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-pru1App-params')});\n            }\n            return response;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('pru1App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$document'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $document) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            } else if (response.status === 403 && response.config.method !== 'GET' && getCSRF() === '') {\n                // If the CSRF token expired, then try to get a new CSRF token and retry the old request\n                var $http = $injector.get('$http');\n                return $http.get('/').finally(function() { return afterCSRFRenewed(response); });\n            }\n            return $q.reject(response);\n        }\n\n        function getCSRF() {\n            var doc = $document[0];\n            if (doc) {\n                var name = 'CSRF-TOKEN=';\n                var ca = doc.cookie.split(';');\n                for (var i = 0; i < ca.length; i++) {\n                    var c = ca[i];\n                    while (c.charAt(0) === ' ') {c = c.substring(1);}\n\n                    if (c.indexOf(name) !== -1) {\n                        return c.substring(name.length, c.length);\n                    }\n                }\n            }\n            return '';\n        }\n\n        function afterCSRFRenewed(oldResponse) {\n            if (getCSRF() !== '') {\n                // retry the old request after the new CSRF-TOKEN is obtained\n                var $http = $injector.get('$http');\n                return $http(oldResponse.config);\n            } else {\n                // unlikely get here but reject with the old response any way and avoid infinite loop\n                return $q.reject(oldResponse);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precendence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage', '$translate', 'JhiLanguageService', 'translationHandler', '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage, $translate, JhiLanguageService, translationHandler, $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to prefered language \"es\"');\n                $cookies.putObject(name, 'es');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('es');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider'];\n\n    function localStorageConfig($localStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //enable CSRF\n        $httpProvider.defaults.xsrfCookieName = 'CSRF-TOKEN';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRF-TOKEN';\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n        \n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n;\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('pru1App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.links = null;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.page = 1;\n        vm.setActive = setActive;\n        vm.totalItems = null;\n        vm.users = [];\n\n\n        vm.loadAll();\n\n        \n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n\n        function loadAll () {\n            User.query({page: vm.page - 1, size: paginationConstants.itemsPerPage}, function (result, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n\n                //hide anonymous user from user management: it's a required user for Spring Security\n                for(var i in result) {\n                    if(result[i]['login'] === 'anonymoususer') {\n                        result.splice(i,1);\n                    }\n                }\n                vm.users = result;\n            });\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.loadAll();\n        }\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n            vm.editForm.$setPristine();\n            vm.editForm.$setUntouched();\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'metrics.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('metrics');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/jhipster/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    index = newKey.lastIndexOf('.');\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(index + 1),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'logs.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('logs');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/jhipster/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'health.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('health');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular.module('pru1App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'configuration.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('configuration');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'audits.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audits');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/jhipster/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('settings');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController (Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function(current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('sessions');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n;\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx = 0;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('password');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('pru1App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;(function(){angular.module(\"pru1App\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/home/home.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><span class=\\\"hipster img-responsive img-rounded\\\"></span></div><div class=\\\"col-md-8\\\"><h1 translate=\\\"home.title\\\">Welcome, Java Hipster!</h1><p class=\\\"lead\\\" translate=\\\"home.subtitle\\\">This is your homepage</p><div ng-switch=\\\"vm.isAuthenticated()\\\"><div class=\\\"alert alert-success\\\" ng-switch-when=\\\"true\\\" translate=\\\"home.logged.message\\\" translate-values=\\\"{username: \\'{{vm.account.login}}\\'}\\\">You are logged in as user \\\"{{vm.account.login}}\\\".</div><div class=\\\"alert alert-warning\\\" ng-switch-when=\\\"false\\\" translate=\\\"global.messages.info.authenticated\\\" translate-compile>If you want to <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")<br>- User (login=\\\"user\\\" and password=\\\"user\\\").</div><div class=\\\"alert alert-warning\\\" ng-switch-when=\\\"false\\\" translate=\\\"global.messages.info.register\\\" translate-compile>You don\\'t have an account yet? <a class=\\\"alert-link\\\" ui-sref=\\\"register\\\">Register a new account</a></div></div><p translate=\\\"home.question\\\">If you have any question on JHipster:</p><ul><li><a href=\\\"http://jhipster.github.io/\\\" target=\\\"_blank\\\" translate=\\\"home.link.homepage\\\">JHipster homepage</a></li><li><a href=\\\"http://stackoverflow.com/tags/jhipster/info\\\" target=\\\"_blank\\\" translate=\\\"home.link.stackoverflow\\\">JHipster on Stack Overflow</a></li><li><a href=\\\"https://github.com/jhipster/generator-jhipster/issues?state=open\\\" target=\\\"_blank\\\" translate=\\\"home.link.bugtracker\\\">JHipster bug tracker</a></li><li><a href=\\\"https://gitter.im/jhipster/generator-jhipster\\\" target=\\\"_blank\\\" translate=\\\"home.link.chat\\\">JHipster public chat room</a></li><li><a href=\\\"https://twitter.com/java_hipster\\\" target=\\\"_blank\\\" translate=\\\"home.link.follow\\\">follow @java_hipster on Twitter</a></li></ul><p><span translate=\\\"home.like\\\">If you like JHipster, don\\'t forget to give us a star on </span>&nbsp;<a href=\\\"https://github.com/jhipster/generator-jhipster\\\" target=\\\"_blank\\\" translate=\\\"home.github\\\">Github</a>!</p></div></div></div>\");\n$templateCache.put(\"app/account/activate/activate.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1 translate=\\\"activate.title\\\">Activation</h1><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"activate.messages.success\\\" translate-compile><strong>Your user has been activated.</strong> Please <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"activate.messages.error\\\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>\");\n$templateCache.put(\"app/account/password/password.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h2 translate=\\\"password.title\\\" translate-values=\\\"{username: \\'{{vm.account.login}}\\'}\\\">Password for [<b>{{vm.account.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"password.messages.success\\\"><strong>Password changed!</strong></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"password.messages.error\\\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\" translate=\\\"global.messages.error.dontmatch\\\">The password and its confirmation do not match!</div><form name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.changePassword()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\" translate=\\\"global.form.newpassword\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"{{\\'global.form.newpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.password\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\" translate=\\\"global.messages.validate.newpassword.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\" translate=\\\"global.messages.validate.newpassword.minlength\\\">Your password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\" translate=\\\"global.messages.validate.newpassword.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\" translate=\\\"global.form.confirmpassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\" translate=\\\"global.messages.validate.confirmpassword.required\\\">Your confirmation password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\" translate=\\\"global.messages.validate.confirmpassword.minlength\\\">Your confirmation password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\" translate=\\\"global.messages.validate.confirmpassword.maxlength\\\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"password.form.button\\\">Save</button></form></div></div></div>\");\n$templateCache.put(\"app/account/register/register.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1 translate=\\\"register.title\\\">Registration</h1><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"register.messages.success\\\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"register.messages.error.fail\\\"><strong>Registration failed!</strong> Please try again later.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorUserExists\\\" translate=\\\"register.messages.error.userexists\\\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorEmailExists\\\" translate=\\\"register.messages.error.emailexists\\\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\" translate=\\\"global.messages.error.dontmatch\\\">The password and its confirmation do not match!</div></div><div class=\\\"col-md-8 col-md-offset-2\\\"><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.register()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"login\\\" translate=\\\"global.form.username\\\">Username</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"login\\\" name=\\\"login\\\" placeholder=\\\"{{\\'global.form.username.placeholder\\' | translate}}\\\" ng-model=\\\"vm.registerAccount.login\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" ng-pattern=\\\"/^[_\\'.@A-Za-z0-9-]*$/\\\" required><div ng-show=\\\"form.login.$dirty && form.login.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.required\\\" translate=\\\"register.messages.validate.login.required\\\">Your username is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.minlength\\\" translate=\\\"register.messages.validate.login.minlength\\\">Your username is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.maxlength\\\" translate=\\\"register.messages.validate.login.maxlength\\\">Your username cannot be longer than 50 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.pattern\\\" translate=\\\"register.messages.validate.login.pattern\\\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\" translate=\\\"global.form.email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"{{\\'global.form.email.placeholder\\' | translate}}\\\" ng-model=\\\"vm.registerAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\" translate=\\\"global.messages.validate.email.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\" translate=\\\"global.messages.validate.email.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\" translate=\\\"global.messages.validate.email.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\" translate=\\\"global.form.newpassword\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"{{\\'global.form.newpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.registerAccount.password\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\" translate=\\\"global.messages.validate.newpassword.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\" translate=\\\"global.messages.validate.newpassword.minlength\\\">Your password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\" translate=\\\"global.messages.validate.newpassword.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.registerAccount.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\" translate=\\\"global.form.confirmpassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\" translate=\\\"global.messages.validate.confirmpassword.required\\\">Your confirmation password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\" translate=\\\"global.messages.validate.confirmpassword.minlength\\\">Your confirmation password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\" translate=\\\"global.messages.validate.confirmpassword.maxlength\\\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"register.form.button\\\">Register</button></form><p></p><div class=\\\"alert alert-warning\\\" translate=\\\"global.messages.info.authenticated\\\" translate-compile>If you want to <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")<br>- User (login=\\\"user\\\" and password=\\\"user\\\").</div></div></div></div>\");\n$templateCache.put(\"app/account/sessions/sessions.html\",\"<div><h2 translate=\\\"sessions.title\\\" translate-values=\\\"{username: \\'{{vm.account.login}}\\'}\\\">Active sessions for [<b>{{vm.account.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"sessions.messages.success\\\"><strong>Session invalidated!</strong></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"sessions.messages.error\\\"><strong>An error has occured!</strong> The session could not be invalidated.</div><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"sessions.table.ipaddress\\\">IP Address</th><th translate=\\\"sessions.table.useragent\\\">User agent</th><th translate=\\\"sessions.table.date\\\">Date</th><th></th></tr></thead><tbody><tr ng-repeat=\\\"session in vm.sessions\\\"><td>{{session.ipAddress}}</td><td>{{session.userAgent}}</td><td>{{session.formattedTokenDate}}</td><td><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.invalidate(session.series)\\\" translate=\\\"sessions.table.button\\\">Invalidate</button></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/account/settings/settings.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h2 translate=\\\"settings.title\\\" translate-values=\\\"{username: \\'{{vm.settingsAccount.login}}\\'}\\\">User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"settings.messages.success\\\"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"firstName\\\" translate=\\\"settings.form.firstname\\\">First Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"firstName\\\" name=\\\"firstName\\\" placeholder=\\\"{{\\'settings.form.firstname.placeholder\\' | translate}}\\\" ng-model=\\\"vm.settingsAccount.firstName\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" required maxlength=\\\"50\\\"><div ng-show=\\\"form.firstName.$dirty && form.firstName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.required\\\" translate=\\\"settings.messages.validate.firstname.required\\\">Your first name is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.minlength\\\" translate=\\\"settings.messages.validate.firstname.minlength\\\">Your first name is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.maxlength\\\" translate=\\\"settings.messages.validate.firstname.maxlength\\\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"lastName\\\" translate=\\\"settings.form.lastname\\\">Last Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastName\\\" name=\\\"lastName\\\" placeholder=\\\"{{\\'settings.form.lastname.placeholder\\' | translate}}\\\" ng-model=\\\"vm.settingsAccount.lastName\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" required maxlength=\\\"50\\\"><div ng-show=\\\"form.lastName.$dirty && form.lastName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.required\\\" translate=\\\"settings.messages.validate.lastname.required\\\">Your last name is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.minlength\\\" translate=\\\"settings.messages.validate.lastname.minlength\\\">Your last name is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.maxlength\\\" translate=\\\"settings.messages.validate.lastname.maxlength\\\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\" translate=\\\"global.form.email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"{{\\'global.form.email.placeholder\\' | translate}}\\\" ng-model=\\\"vm.settingsAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required maxlength=\\\"100\\\"><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\" translate=\\\"global.messages.validate.email.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\" translate=\\\"global.messages.validate.email.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\" translate=\\\"global.messages.validate.email.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\\\"form-group\\\"><label for=\\\"langKey\\\" translate=\\\"settings.form.language\\\">Language</label><select id=\\\"langKey\\\" name=\\\"langKey\\\" class=\\\"form-control\\\" ng-model=\\\"vm.settingsAccount.langKey\\\" ng-controller=\\\"JhiLanguageController as languageVm\\\" ng-options=\\\"code as (code | findLanguageFromKey) for code in languageVm.languages\\\"></select></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"settings.form.button\\\">Save</button></form></div></div></div>\");\n$templateCache.put(\"app/admin/audits/audits.html\",\"<div><h2 translate=\\\"audits.title\\\">Audits</h2><div class=\\\"row\\\"><div class=\\\"col-md-5\\\"><h4 translate=\\\"audits.filter.title\\\">Filter by date</h4><p class=\\\"input-group\\\"><span class=\\\"input-group-addon\\\" translate=\\\"audits.filter.from\\\">from</span> <input type=\\\"date\\\" class=\\\"input-sm form-control\\\" name=\\\"start\\\" ng-model=\\\"vm.fromDate\\\" ng-change=\\\"vm.onChangeDate()\\\" required> <span class=\\\"input-group-addon\\\" translate=\\\"audits.filter.to\\\">to</span> <input type=\\\"date\\\" class=\\\"input-sm form-control\\\" name=\\\"end\\\" ng-model=\\\"vm.toDate\\\" ng-change=\\\"vm.onChangeDate()\\\" required></p></div></div><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\"><thead><tr><th ng-click=\\\"predicate = \\'timestamp\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.date\\\">Date</span></th><th ng-click=\\\"predicate = \\'principal\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.principal\\\">User</span></th><th ng-click=\\\"predicate = \\'type\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.status\\\">State</span></th><th ng-click=\\\"predicate = \\'data.message\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.data\\\">Extra data</span></th></tr></thead><tr ng-repeat=\\\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\\\" ng-hide=\\\"audit.filtered\\\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\\\"audit.data.message\\\">{{audit.data.message}}</span> <span ng-show=\\\"audit.data.remoteAddress\\\"><span translate=\\\"audits.table.data.remoteAddress\\\">Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\\\"text-center\\\"><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.loadPage(vm.page)\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/admin/configuration/configuration.html\",\"<div><h2 translate=\\\"configuration.title\\\">Configuration</h2><span translate=\\\"configuration.filter\\\">Filter (by prefix)</span> <input type=\\\"text\\\" ng-model=\\\"filter\\\" class=\\\"form-control\\\"><label ng-hide=\\\"filteredConfig.length == 0\\\">Spring configuration</label><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\" style=\\\"table-layout:fixed\\\" ng-hide=\\\"filteredConfig.length == 0\\\"><thead><tr><th ng-click=\\\"predicate = \\'prefix\\'; reverse=!reverse\\\" class=\\\"col-sm-4\\\"><span translate=\\\"configuration.table.prefix\\\">Prefix</span></th><th translate=\\\"configuration.table.properties\\\" class=\\\"col-sm-8\\\">Properties</th></tr></thead><tr ng-repeat=\\\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\\\"><td><span>{{entry.prefix}}</span></td><td><div class=\\\"row\\\" ng-repeat=\\\"(key, value) in entry.properties\\\"><div class=\\\"col-md-4\\\">{{key}}</div><div class=\\\"col-md-8\\\"><span class=\\\"pull-right label label-default break\\\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\\\"(key, value) in vm.allConfiguration\\\"><label ng-hide=\\\"filtered.length == 0\\\"><span>{{key}}</span></label><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\" style=\\\"table-layout:fixed\\\" ng-hide=\\\"filtered.length == 0\\\"><thead><tr><th class=\\\"col-sm-4\\\">Property</th><th class=\\\"col-sm-8\\\">Value</th></tr></thead><tbody><tr ng-repeat=\\\"item in filtered = (value | filter:filter)\\\"><td class=\\\"break\\\">{{item.key}}</td><td class=\\\"break\\\"><span class=\\\"pull-right label label-default break\\\">{{item.val}}</span></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/docs/docs.html\",\"<iframe src=\\\"swagger-ui/index.html\\\" frameborder=\\\"0\\\" marginheight=\\\"0\\\" marginwidth=\\\"0\\\" width=\\\"100%\\\" height=\\\"900\\\" scrolling=\\\"auto\\\" target=\\\"_top\\\"></iframe>\");\n$templateCache.put(\"app/admin/health/health.html\",\"<div><h2 translate=\\\"health.title\\\">Health Checks</h2><p><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.refresh()\\\"><span class=\\\"glyphicon glyphicon-refresh\\\"></span>&nbsp;<span translate=\\\"health.refresh.button\\\">Refresh</span></button></p><table id=\\\"healthCheck\\\" class=\\\"table table-striped\\\"><thead><tr><th class=\\\"col-md-7\\\" translate=\\\"health.table.service\\\">Service Name</th><th class=\\\"col-md-2 text-center\\\" translate=\\\"health.table.status\\\">Status</th><th class=\\\"col-md-2 text-center\\\" translate=\\\"health.details.details\\\">Details</th></tr></thead><tbody><tr ng-repeat=\\\"health in vm.healthData\\\"><td>{{\\'health.indicator.\\' + vm.baseName(health.name) | translate}} {{vm.subSystemName(health.name)}}</td><td class=\\\"text-center\\\"><span class=\\\"label\\\" ng-class=\\\"vm.getLabelClass(health.status)\\\">{{\\'health.status.\\' + health.status | translate}}</span></td><td class=\\\"text-center\\\"><a class=\\\"hand\\\" ng-click=\\\"vm.showHealth(health)\\\" ng-show=\\\"health.details || health.error\\\"><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></a></td></tr></tbody></table></div>\");\n$templateCache.put(\"app/admin/health/health.modal.html\",\"<div class=\\\"modal-header\\\"><button aria-label=\\\"Close\\\" data-dismiss=\\\"modal\\\" class=\\\"close\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span></button><h4 class=\\\"modal-title\\\" id=\\\"showHealthLabel\\\">{{\\'health.indicator.\\' + vm.baseName(vm.currentHealth.name) | translate}} {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\\\"modal-body pad\\\"><div ng-show=\\\"vm.currentHealth.details\\\"><h4 translate=\\\"health.details.properties\\\">Properties</h4><table class=\\\"table table-striped\\\"><thead><tr><th class=\\\"col-md-6 text-left\\\" translate=\\\"health.details.name\\\">Name</th><th class=\\\"col-md-6 text-left\\\" translate=\\\"health.details.value\\\">Value</th></tr></thead><tbody><tr ng-repeat=\\\"(k,v) in vm.currentHealth.details\\\"><td class=\\\"col-md-6 text-left\\\">{{k}}</td><td class=\\\"col-md-6 text-left\\\">{{v}}</td></tr></tbody></table></div><div ng-show=\\\"vm.currentHealth.error\\\"><h4 translate=\\\"health.details.error\\\">Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\\\"modal-footer\\\"><button data-dismiss=\\\"modal\\\" class=\\\"btn btn-default pull-left\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\">Done</button></div>\");\n$templateCache.put(\"app/admin/logs/logs.html\",\"<div class=\\\"table-responsive\\\"><h2 translate=\\\"logs.title\\\">Logs</h2><p translate=\\\"logs.nbloggers\\\" translate-values=\\\"{total: \\'{{ vm.loggers.length }}\\'}\\\">There are {{ vm.loggers.length }} loggers.</p><span translate=\\\"logs.filter\\\">Filter</span> <input type=\\\"text\\\" ng-model=\\\"filter\\\" class=\\\"form-control\\\"><table class=\\\"table table-condensed table-striped table-bordered\\\"><thead><tr title=\\\"click to order\\\"><th ng-click=\\\"predicate = \\'name\\'; reverse=!reverse\\\"><span translate=\\\"logs.table.name\\\">Name</span></th><th ng-click=\\\"predicate = \\'level\\'; reverse=!reverse\\\"><span translate=\\\"logs.table.level\\\">Level</span></th></tr></thead><tr ng-repeat=\\\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\\\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\\\"vm.changeLevel(logger.name, \\'TRACE\\')\\\" ng-class=\\\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">TRACE</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'DEBUG\\')\\\" ng-class=\\\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">DEBUG</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'INFO\\')\\\" ng-class=\\\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">INFO</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'WARN\\')\\\" ng-class=\\\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">WARN</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'ERROR\\')\\\" ng-class=\\\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">ERROR</button></td></tr></table></div>\");\n$templateCache.put(\"app/admin/metrics/metrics.html\",\"<div><h2 translate=\\\"metrics.title\\\">Application Metrics</h2><p><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.refresh()\\\"><span class=\\\"glyphicon glyphicon-refresh\\\"></span>&nbsp;<span translate=\\\"metrics.refresh.button\\\">Refresh</span></button></p><h3 translate=\\\"metrics.jvm.title\\\">JVM Metrics</h3><div class=\\\"row\\\" ng-hide=\\\"vm.updatingMetrics\\\"><div class=\\\"col-md-4\\\"><b translate=\\\"metrics.jvm.memory.title\\\">Memory</b><p><span translate=\\\"metrics.jvm.memory.total\\\">Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.memory.heap\\\">Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.memory.nonheap\\\">Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\\\"col-md-4\\\"><b translate=\\\"metrics.jvm.threads.title\\\">Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\\\"hand\\\" ng-click=\\\"vm.refreshThreadDumpData()\\\" data-toggle=\\\"modal\\\" data-target=\\\"#threadDump\\\"><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></a><p><span translate=\\\"metrics.jvm.threads.runnable\\\">Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.threads.timedwaiting\\\">Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"warning\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.threads.waiting\\\">Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"warning\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.threads.blocked\\\">Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\\\"col-md-4\\\"><b translate=\\\"metrics.jvm.gc.title\\\">Garbage collections</b><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.marksweepcount\\\">Mark Sweep count</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.marksweeptime\\\">Mark Sweep time</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.scavengecount\\\">Scavenge count</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.scavengetime\\\">Scavenge time</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\\\"well well-lg\\\" ng-show=\\\"vm.updatingMetrics\\\" translate=\\\"metrics.updating\\\">Updating...</div><h3 translate=\\\"metrics.jvm.http.title\\\">HTTP requests (events per second)</h3><p><span translate=\\\"metrics.jvm.http.active\\\">Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span translate=\\\"metrics.jvm.http.total\\\">Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"metrics.jvm.http.table.code\\\">Code</th><th translate=\\\"metrics.jvm.http.table.count\\\">Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.http.table.mean\\\">Mean</th><th class=\\\"text-right\\\"><span translate=\\\"metrics.jvm.http.table.average\\\">Average</span> (1 min)</th><th class=\\\"text-right\\\"><span translate=\\\"metrics.jvm.http.table.average\\\">Average</span> (5 min)</th><th class=\\\"text-right\\\"><span translate=\\\"metrics.jvm.http.table.average\\\">Average</span> (15 min)</th></tr></thead><tbody><tr><td translate=\\\"metrics.jvm.http.code.ok\\\">OK</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td translate=\\\"metrics.jvm.http.code.notfound\\\">Not Found</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td translate=\\\"metrics.jvm.http.code.servererror\\\">Server error</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3 translate=\\\"metrics.servicesstats.title\\\">Services statistics (time in millisecond)</h3><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"metrics.servicesstats.table.name\\\">Service name</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.count\\\">Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.mean\\\">Mean</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.min\\\">Min</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p50\\\">p50</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p75\\\">p75</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p95\\\">p95</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p99\\\">p99</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.max\\\">Max</th></tr></thead><tbody><tr ng-repeat=\\\"(k, v) in vm.servicesStats\\\"><td>{{k}}</td><td class=\\\"text-right\\\">{{v.count}}</td><td class=\\\"text-right\\\">{{v.mean * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.min * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p50 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p75 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p95 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p99 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3 translate=\\\"metrics.ehcache.title\\\">Ehcache statistics</h3><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"metrics.ehcache.cachename\\\">Cache name</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.objects\\\">Objects</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.hits\\\">Hits</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.misses\\\">Misses</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.evictioncount\\\">Eviction count</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.mean\\\">Mean get time (ms)</th></tr></thead><tbody><tr ng-repeat=\\\"(k, v) in vm.cachesStats\\\" ng-once><td>{{v.name}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.objects\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.hits\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.misses\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.eviction-count\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.mean-get-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 translate=\\\"metrics.datasource.title\\\" ng-show=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value > 0\\\">DataSource statistics (time in millisecond)</h3><div class=\\\"table-responsive\\\" ng-show=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value > 0\\\"><table class=\\\"table table-striped\\\"><thead><tr><th><span translate=\\\"metrics.datasource.usage\\\">Usage</span> ({{vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value}})</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.count\\\">Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.mean\\\">Mean</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.min\\\">Min</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p50\\\">p50</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p75\\\">p75</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p95\\\">p95</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p99\\\">p99</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.max\\\">Max</th></tr></thead><tbody><tr><td><div class=\\\"progress progress-striped\\\"><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value\\\" value=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].count}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].mean | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].min | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p50 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p75 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p95 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p99 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/metrics/metrics.modal.html\",\"<!-- Modal used to display the threads dump --><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"vm.cancel()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"metrics.jvm.threads.dump.title\\\">Threads dump</h4></div><div class=\\\"modal-body pad\\\"><span class=\\\"label label-primary\\\" ng-click=\\\"threadDumpFilter = {}\\\">All&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\\\"label label-success\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\\\">Runnable&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\\\"label label-info\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'WAITING\\'}\\\">Waiting&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\\\"label label-warning\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\\\">Timed Waiting&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\\\"label label-danger\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\\\">Blocked&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\\\"voffset2\\\">&nbsp;</div>Filter <input type=\\\"text\\\" ng-model=\\\"threadDumpFilter\\\" class=\\\"form-control\\\"><div class=\\\"row pad\\\" ng-repeat=\\\"(k, v) in vm.threadDump | filter:threadDumpFilter\\\"><h5><span class=\\\"label\\\" ng-class=\\\"vm.getLabelClass(v.threadState)\\\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\\\"show = !show\\\"><span ng-show=\\\"!show\\\" translate=\\\"metrics.jvm.threads.dump.show\\\">Show StackTrace</span> <span ng-show=\\\"show\\\" translate=\\\"metrics.jvm.threads.dump.hide\\\">Hide StackTrace</span></a></h5><div class=\\\"well\\\" ng-show=\\\"show\\\"><div ng-repeat=\\\"(stK, stV) in v.stackTrace\\\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\\\"voffset1\\\"></span></div></div><table class=\\\"table table-condensed\\\"><thead><tr><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.blockedtime\\\">Blocked Time</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.blockedcount\\\">Blocked Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.waitedtime\\\">Waited Time</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.waitedcount\\\">Waited Count</th><th translate=\\\"metrics.jvm.threads.dump.lockname\\\">Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default pull-left\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.cancel()\\\">Done</button></div>\");\n$templateCache.put(\"app/admin/user-management/user-management-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.user.login)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"userManagement.delete.question\\\" translate-values=\\\"{login: \\'{{vm.user.login}}\\'}\\\">Are you sure you want to delete this User?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/admin/user-management/user-management-detail.html\",\"<div><h2><span translate=\\\"userManagement.detail.title\\\">User</span> \\\"{{vm.user.login}}\\\"</h2><dl class=\\\"dl-horizontal\\\"><dt><span translate=\\\"userManagement.login\\\">Login</span></dt><dd><span>{{vm.user.login}}</span></dd><dt><span translate=\\\"userManagement.firstName\\\">First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span translate=\\\"userManagement.lastName\\\">Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span translate=\\\"userManagement.email\\\">Email</span></dt><dd>{{vm.user.email}}</dd><dt><span translate=\\\"userManagement.activated\\\">Activated</span></dt><dd>{{vm.user.activated}}</dd><dt><span translate=\\\"userManagement.langKey\\\">Lang Key</span></dt><dd>{{vm.user.langKey}}</dd><dt><span translate=\\\"userManagement.createdBy\\\">Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span translate=\\\"userManagement.createdDate\\\">Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span translate=\\\"userManagement.lastModifiedBy\\\">Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span translate=\\\"userManagement.lastModifiedDate\\\">Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span translate=\\\"userManagement.profiles\\\">Profiles</span></dt><dd><ul class=\\\"list-unstyled\\\"><li ng-repeat=\\\"authority in vm.user.authorities\\\"><span>{{authority}}</span></li></ul></dd></dl><button type=\\\"submit\\\" ui-sref=\\\"user-management\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/admin/user-management/user-management-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myUserLabel\\\" translate=\\\"userManagement.home.createOrEditLabel\\\">Create or edit a User</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"id\\\" ng-model=\\\"vm.user.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"userManagement.login\\\">Login</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"login\\\" ng-model=\\\"vm.user.login\\\" ng-required=\\\"vm.user.id == null\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" ng-pattern=\\\"/^[_\\'.@A-Za-z0-9-]*$/\\\"><div ng-show=\\\"editForm.login.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.login.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.login.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"50\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"userManagement.firstName\\\">First Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" ng-model=\\\"vm.user.firstName\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.firstName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.firstName.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"50\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label translate=\\\"userManagement.lastName\\\">Last Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" ng-model=\\\"vm.user.lastName\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.lastName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.lastName.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"50\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"userManagement.email\\\">Email</label><input type=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" ng-model=\\\"vm.user.email\\\" required ng-maxlength=\\\"100\\\"><div ng-show=\\\"editForm.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"100\\\">This field cannot be longer than 100 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p></div></div><div class=\\\"form-group\\\"><label for=\\\"activated\\\"><input ng-disabled=\\\"vm.user.id === null\\\" type=\\\"checkbox\\\" id=\\\"activated\\\" ng-model=\\\"vm.user.activated\\\"> <span translate=\\\"userManagement.activated\\\">Activated</span></label></div><div class=\\\"form-group\\\"><label translate=\\\"userManagement.langKey\\\">Lang Key</label><select class=\\\"form-control\\\" name=\\\"langKey\\\" ng-model=\\\"vm.user.langKey\\\" ng-options=\\\"language as language for language in vm.languages track by language\\\"></select></div><div class=\\\"form-group\\\"><label translate=\\\"userManagement.profiles\\\">Profiles</label><select class=\\\"form-control\\\" multiple=\\\"multiple\\\" name=\\\"authority\\\" ng-model=\\\"vm.user.authorities\\\" ng-options=\\\"authority for authority in vm.authorities\\\"></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/admin/user-management/user-management.html\",\"<div><h2 translate=\\\"userManagement.home.title\\\">Users</h2><jhi-alert></jhi-alert><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"user-management.new\\\"><span class=\\\"glyphicon glyphicon-flash\\\"></span> <span translate=\\\"userManagement.home.createLabel\\\">Create a new User</span></button></div></div><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"global.field.id\\\">ID</th><th translate=\\\"userManagement.login\\\">Login</th><th translate=\\\"userManagement.email\\\">Email</th><th></th><th translate=\\\"userManagement.langKey\\\">Lang Key</th><th translate=\\\"userManagement.profiles\\\">Profiles</th><th translate=\\\"userManagement.createdDate\\\">Created Date</th><th translate=\\\"userManagement.lastModifiedBy\\\">Last Modified By</th><th translate=\\\"userManagement.lastModifiedDate\\\">Last Modified Date</th><th></th></tr></thead><tbody><tr ng-repeat=\\\"user in vm.users track by user.id\\\"><td><a ui-sref=\\\"user-management-detail({login:user.login})\\\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><span class=\\\"label label-danger\\\" ng-click=\\\"vm.setActive(user, true)\\\" ng-show=\\\"!user.activated\\\" translate=\\\"userManagement.deactivated\\\" style=\\\"cursor: pointer\\\">Deactivated</span> <span class=\\\"label label-success\\\" ng-click=\\\"vm.setActive(user, false)\\\" ng-show=\\\"user.activated\\\" translate=\\\"userManagement.activated\\\" style=\\\"cursor: pointer\\\">Activated</span></td><td>{{user.langKey}}</td><td><div ng-repeat=\\\"authority in user.authorities\\\"><span class=\\\"label label-info\\\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"user-management-detail({login:user.login})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"user-management.edit({login:user.login})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"user-management.delete({login:user.login})\\\" class=\\\"btn btn-danger btn-sm\\\" ng-disabled=\\\"vm.currentAccount.login==user.login\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.loadAll()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/components/login/login.html\",\"<div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.cancel()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"login.title\\\">Sign in</h4></div><div class=\\\"modal-body\\\"><div class=\\\"row\\\"><div class=\\\"col-md-4 col-md-offset-4\\\"><h1 translate=\\\"login.title\\\">Sign in</h1></div><div class=\\\"col-md-8 col-md-offset-2\\\"><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.authenticationError\\\" translate=\\\"login.messages.error.authentication\\\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\\\"col-md-8 col-md-offset-2\\\"><form class=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"vm.login($event)\\\"><div class=\\\"form-group\\\"><label for=\\\"username\\\" translate=\\\"global.form.username\\\">Login</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" placeholder=\\\"{{\\'global.form.username.placeholder\\' | translate}}\\\" ng-model=\\\"vm.username\\\"></div><div class=\\\"form-group\\\"><label for=\\\"password\\\" translate=\\\"login.form.password\\\">Password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" placeholder=\\\"{{\\'login.form.password.placeholder\\' | translate}}\\\" ng-model=\\\"vm.password\\\"></div><div class=\\\"form-group\\\"><label for=\\\"rememberMe\\\"><input type=\\\"checkbox\\\" id=\\\"rememberMe\\\" ng-model=\\\"vm.rememberMe\\\" checked=\\\"checked\\\"> <span translate=\\\"login.form.rememberme\\\">Remember me</span></label></div><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" translate=\\\"login.form.button\\\">Sign in</button></form><p></p><div class=\\\"alert alert-warning\\\"><a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.requestResetPassword()\\\" translate=\\\"login.password.forgot\\\">Did you forget your password?</a></div><div class=\\\"alert alert-warning\\\" translate=\\\"global.messages.info.register\\\" translate-compile>You don\\'t have an account yet? <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.register()\\\">Register a new account</a></div></div></div></div>\");\n$templateCache.put(\"app/entities/ciudad/ciudad-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.ciudad.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"pru1App.ciudad.delete.question\\\" translate-values=\\\"{id: \\'{{vm.ciudad.id}}\\'}\\\">Are you sure you want to delete this Ciudad?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/ciudad/ciudad-detail.html\",\"<div><h2><span translate=\\\"pru1App.ciudad.detail.title\\\">Ciudad</span> {{vm.ciudad.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\\\"dl-horizontal jh-entity-details\\\"><dt><span translate=\\\"pru1App.ciudad.nombre\\\">Nombre</span></dt><dd><span>{{vm.ciudad.nombre}}</span></dd><dt><span translate=\\\"pru1App.ciudad.cantidad\\\">Cantidad</span></dt><dd><span>{{vm.ciudad.cantidad}}</span></dd><dt><span translate=\\\"pru1App.ciudad.ano\\\">Ano</span></dt><dd><span>{{vm.ciudad.ano}}</span></dd><dt><span translate=\\\"pru1App.ciudad.numDecimal\\\">Num Decimal</span></dt><dd><span>{{vm.ciudad.numDecimal}}</span></dd><dt><span translate=\\\"pru1App.ciudad.flotante\\\">Flotante</span></dt><dd><span>{{vm.ciudad.flotante}}</span></dd><dt><span translate=\\\"pru1App.ciudad.numDoble\\\">Num Doble</span></dt><dd><span>{{vm.ciudad.numDoble}}</span></dd><dt><span translate=\\\"pru1App.ciudad.checkBox\\\">Check Box</span></dt><dd><span>{{vm.ciudad.checkBox}}</span></dd><dt><span translate=\\\"pru1App.ciudad.fecha\\\">Fecha</span></dt><dd><span>{{vm.ciudad.fecha | date:\\'mediumDate\\'}}</span></dd><dt><span translate=\\\"pru1App.ciudad.imagen\\\">Imagen</span></dt><dd><div ng-if=\\\"vm.ciudad.imagen\\\"><a ng-click=\\\"vm.openFile(vm.ciudad.imagenContentType, vm.ciudad.imagen)\\\"><img data-ng-src=\\\"{{\\'data:\\' + vm.ciudad.imagenContentType + \\';base64,\\' + vm.ciudad.imagen}}\\\" style=\\\"max-width: 100%\\\"> </a>{{vm.ciudad.imagenContentType}}, {{vm.byteSize(vm.ciudad.imagen)}}</div></dd><dt><span translate=\\\"pru1App.ciudad.fechaHora\\\">Fecha Hora</span></dt><dd><span>{{vm.ciudad.fechaHora | date:\\'medium\\'}}</span></dd><dt><span translate=\\\"pru1App.ciudad.muscia\\\">Muscia</span></dt><dd><div ng-if=\\\"vm.ciudad.muscia\\\"><a ng-click=\\\"vm.openFile(vm.ciudad.musciaContentType, vm.ciudad.muscia)\\\" translate=\\\"entity.action.open\\\">open</a> {{vm.ciudad.musciaContentType}}, {{vm.byteSize(vm.ciudad.muscia)}}</div></dd><dt><span translate=\\\"pru1App.ciudad.archivo\\\">Archivo</span></dt><dd><div ng-if=\\\"vm.ciudad.archivo\\\"><a ng-click=\\\"vm.openFile(vm.ciudad.archivoContentType, vm.ciudad.archivo)\\\" translate=\\\"entity.action.open\\\">open</a> {{vm.ciudad.archivoContentType}}, {{vm.byteSize(vm.ciudad.archivo)}}</div></dd><dt><span translate=\\\"pru1App.ciudad.estados\\\">Estados</span></dt><dd><span translate=\\\"{{\\'pru1App.Estado.\\' + vm.ciudad.estados}}\\\">{{vm.ciudad.estados}}</span></dd><dt><span translate=\\\"pru1App.ciudad.pais\\\">Pais</span></dt><dd><a ui-sref=\\\"pais-detail({id:vm.ciudad.pais.id})\\\">{{vm.ciudad.pais.paisNombre}}</a></dd></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/ciudad/ciudad-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myCiudadLabel\\\" translate=\\\"pru1App.ciudad.home.createOrEditLabel\\\">Create or edit a Ciudad</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\" ng-show=\\\"vm.ciudad.id\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.ciudad.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.nombre\\\" for=\\\"field_nombre\\\">Nombre</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"nombre\\\" id=\\\"field_nombre\\\" ng-model=\\\"vm.ciudad.nombre\\\" required ng-minlength=\\\"3\\\" ng-maxlength=\\\"20\\\"><div ng-show=\\\"editForm.nombre.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.nombre.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.nombre.$error.minlength\\\" translate=\\\"entity.validation.minlength\\\" translate-value-min=\\\"3\\\">This field is required to be at least 3 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.nombre.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"20\\\">This field cannot be longer than 20 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.cantidad\\\" for=\\\"field_cantidad\\\">Cantidad</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"cantidad\\\" id=\\\"field_cantidad\\\" ng-model=\\\"vm.ciudad.cantidad\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.ano\\\" for=\\\"field_ano\\\">Ano</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"ano\\\" id=\\\"field_ano\\\" ng-model=\\\"vm.ciudad.ano\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.numDecimal\\\" for=\\\"field_numDecimal\\\">Num Decimal</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"numDecimal\\\" id=\\\"field_numDecimal\\\" ng-model=\\\"vm.ciudad.numDecimal\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.flotante\\\" for=\\\"field_flotante\\\">Flotante</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"flotante\\\" id=\\\"field_flotante\\\" ng-model=\\\"vm.ciudad.flotante\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.numDoble\\\" for=\\\"field_numDoble\\\">Num Doble</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"numDoble\\\" id=\\\"field_numDoble\\\" ng-model=\\\"vm.ciudad.numDoble\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.checkBox\\\" for=\\\"field_checkBox\\\">Check Box</label><input type=\\\"checkbox\\\" class=\\\"form-control\\\" name=\\\"checkBox\\\" id=\\\"field_checkBox\\\" ng-model=\\\"vm.ciudad.checkBox\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.fecha\\\" for=\\\"field_fecha\\\">Fecha</label><div class=\\\"input-group\\\"><input id=\\\"field_fecha\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"fecha\\\" uib-datepicker-popup=\\\"{{dateformat}}\\\" ng-model=\\\"vm.ciudad.fecha\\\" is-open=\\\"vm.datePickerOpenStatus.fecha\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'fecha\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div><div class=\\\"form-group\\\" ngf-drop ngf-change=\\\"vm.setImagen($file, vm.ciudad)\\\" ngf-pattern=\\\"\\'image/*\\'\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.imagen\\\" for=\\\"field_imagen\\\">Imagen</label><div><img data-ng-src=\\\"{{\\'data:\\' + vm.ciudad.imagenContentType + \\';base64,\\' + vm.ciudad.imagen}}\\\" style=\\\"max-height: 100px\\\" ng-if=\\\"vm.ciudad.imagen\\\"><div ng-if=\\\"vm.ciudad.imagen\\\" class=\\\"help-block clearfix\\\"><span class=\\\"pull-left\\\">{{vm.ciudad.imagenContentType}}, {{vm.byteSize(vm.ciudad.imagen)}}</span> <button ng-click=\\\"vm.ciudad.imagen=null;vm.ciudad.imagenContentType=null;\\\" class=\\\"btn btn-default btn-xs pull-right\\\"><span class=\\\"glyphicon glyphicon-remove\\\"></span></button></div><button type=\\\"file\\\" ngf-select class=\\\"btn btn-default btn-block\\\" ngf-change=\\\"vm.setImagen($file, vm.ciudad)\\\" accept=\\\"image/*\\\" translate=\\\"entity.action.addimage\\\">Add image</button></div><input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"imagen\\\" id=\\\"field_imagen\\\" ng-model=\\\"vm.ciudad.imagen\\\"> <input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"imagenContentType\\\" id=\\\"field_imagenContentType\\\" ng-model=\\\"vm.ciudad.imagenContentType\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.fechaHora\\\" for=\\\"field_fechaHora\\\">Fecha Hora</label><div class=\\\"input-group\\\"><input id=\\\"field_fechaHora\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"fechaHora\\\" datetime-picker=\\\"{{dateformat}}\\\" ng-model=\\\"vm.ciudad.fechaHora\\\" is-open=\\\"vm.datePickerOpenStatus.fechaHora\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'fechaHora\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div><div class=\\\"form-group\\\" ngf-drop ngf-change=\\\"vm.setMuscia($file, vm.ciudad)\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.muscia\\\" for=\\\"field_muscia\\\">Muscia</label><div><div ng-if=\\\"vm.ciudad.muscia\\\" class=\\\"help-block clearfix\\\"><a class=\\\"pull-left\\\" ng-click=\\\"vm.openFile(vm.ciudad.musciaContentType, vm.ciudad.muscia)\\\" translate=\\\"entity.action.open\\\">open</a><br><span class=\\\"pull-left\\\">{{vm.ciudad.musciaContentType}}, {{vm.byteSize(vm.ciudad.muscia)}}</span> <button ng-click=\\\"vm.ciudad.muscia=null;vm.ciudad.musciaContentType=null;\\\" class=\\\"btn btn-default btn-xs pull-right\\\"><span class=\\\"glyphicon glyphicon-remove\\\"></span></button></div><button type=\\\"file\\\" ngf-select class=\\\"btn btn-default btn-block\\\" ngf-change=\\\"vm.setMuscia($file, vm.ciudad)\\\" translate=\\\"entity.action.addblob\\\">Add blob</button></div><input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"muscia\\\" id=\\\"field_muscia\\\" ng-model=\\\"vm.ciudad.muscia\\\"> <input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"musciaContentType\\\" id=\\\"field_musciaContentType\\\" ng-model=\\\"vm.ciudad.musciaContentType\\\"></div><div class=\\\"form-group\\\" ngf-drop ngf-change=\\\"vm.setArchivo($file, vm.ciudad)\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.archivo\\\" for=\\\"field_archivo\\\">Archivo</label><div><div ng-if=\\\"vm.ciudad.archivo\\\" class=\\\"help-block clearfix\\\"><a class=\\\"pull-left\\\" ng-click=\\\"vm.openFile(vm.ciudad.archivoContentType, vm.ciudad.archivo)\\\" translate=\\\"entity.action.open\\\">open</a><br><span class=\\\"pull-left\\\">{{vm.ciudad.archivoContentType}}, {{vm.byteSize(vm.ciudad.archivo)}}</span> <button ng-click=\\\"vm.ciudad.archivo=null;vm.ciudad.archivoContentType=null;\\\" class=\\\"btn btn-default btn-xs pull-right\\\"><span class=\\\"glyphicon glyphicon-remove\\\"></span></button></div><button type=\\\"file\\\" ngf-select class=\\\"btn btn-default btn-block\\\" ngf-change=\\\"vm.setArchivo($file, vm.ciudad)\\\" translate=\\\"entity.action.addblob\\\">Add blob</button></div><input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"archivo\\\" id=\\\"field_archivo\\\" ng-model=\\\"vm.ciudad.archivo\\\"> <input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"archivoContentType\\\" id=\\\"field_archivoContentType\\\" ng-model=\\\"vm.ciudad.archivoContentType\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.ciudad.estados\\\" for=\\\"field_estados\\\">Estados</label><select class=\\\"form-control\\\" name=\\\"estados\\\" ng-model=\\\"vm.ciudad.estados\\\" id=\\\"field_estados\\\"><option value=\\\"ACTIVO\\\" translate=\\\"pru1App.Estado.ACTIVO\\\">ACTIVO</option><option value=\\\"BAJA\\\" translate=\\\"pru1App.Estado.BAJA\\\">BAJA</option><option value=\\\"DESACTIVADO\\\" translate=\\\"pru1App.Estado.DESACTIVADO\\\">DESACTIVADO</option></select></div><div class=\\\"form-group\\\"><label translate=\\\"pru1App.ciudad.pais\\\" for=\\\"field_pais\\\">Pais</label><select class=\\\"form-control\\\" id=\\\"field_pais\\\" name=\\\"pais\\\" ng-model=\\\"vm.ciudad.pais\\\" ng-options=\\\"pais as pais.paisNombre for pais in vm.pais track by pais.id\\\"><option value=\\\"\\\"></option></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || vm.isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/ciudad/ciudads.html\",\"<div><h2 translate=\\\"pru1App.ciudad.home.title\\\">Ciudads</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"ciudad.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span translate=\\\"pru1App.ciudad.home.createLabel\\\">Create new Ciudad</span></button></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.reset()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"nombre\\\"><span translate=\\\"pru1App.ciudad.nombre\\\">Nombre</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"cantidad\\\"><span translate=\\\"pru1App.ciudad.cantidad\\\">Cantidad</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"ano\\\"><span translate=\\\"pru1App.ciudad.ano\\\">Ano</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"numDecimal\\\"><span translate=\\\"pru1App.ciudad.numDecimal\\\">Num Decimal</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"flotante\\\"><span translate=\\\"pru1App.ciudad.flotante\\\">Flotante</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"numDoble\\\"><span translate=\\\"pru1App.ciudad.numDoble\\\">Num Doble</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"checkBox\\\"><span translate=\\\"pru1App.ciudad.checkBox\\\">Check Box</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"fecha\\\"><span translate=\\\"pru1App.ciudad.fecha\\\">Fecha</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"imagen\\\"><span translate=\\\"pru1App.ciudad.imagen\\\">Imagen</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"fechaHora\\\"><span translate=\\\"pru1App.ciudad.fechaHora\\\">Fecha Hora</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"muscia\\\"><span translate=\\\"pru1App.ciudad.muscia\\\">Muscia</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"archivo\\\"><span translate=\\\"pru1App.ciudad.archivo\\\">Archivo</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"estados\\\"><span translate=\\\"pru1App.ciudad.estados\\\">Estados</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"pais.paisNombre\\\"><span translate=\\\"pru1App.ciudad.pais\\\">Pais</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody infinite-scroll=\\\"vm.loadPage(vm.page + 1)\\\" infinite-scroll-disabled=\\\"vm.page >= vm.links[\\'last\\']\\\"><tr ng-repeat=\\\"ciudad in vm.ciudads track by ciudad.id\\\"><td><a ui-sref=\\\"ciudad-detail({id:ciudad.id})\\\">{{ciudad.id}}</a></td><td>{{ciudad.nombre}}</td><td>{{ciudad.cantidad}}</td><td>{{ciudad.ano}}</td><td>{{ciudad.numDecimal}}</td><td>{{ciudad.flotante}}</td><td>{{ciudad.numDoble}}</td><td>{{ciudad.checkBox}}</td><td>{{ciudad.fecha | date:\\'mediumDate\\'}}</td><td><a ng-if=\\\"ciudad.imagen\\\" ng-click=\\\"vm.openFile(ciudad.imagenContentType, ciudad.imagen)\\\"><img data-ng-src=\\\"{{\\'data:\\' + ciudad.imagenContentType + \\';base64,\\' + ciudad.imagen}}\\\" style=\\\"max-height: 30px\\\"> </a><span ng-if=\\\"ciudad.imagen\\\">{{ciudad.imagenContentType}}, {{vm.byteSize(ciudad.imagen)}}</span></td><td>{{ciudad.fechaHora | date:\\'medium\\'}}</td><td><a ng-if=\\\"ciudad.muscia\\\" ng-click=\\\"vm.openFile(ciudad.musciaContentType, ciudad.muscia)\\\" translate=\\\"entity.action.open\\\">open</a> <span ng-if=\\\"ciudad.muscia\\\">{{ciudad.musciaContentType}}, {{vm.byteSize(ciudad.muscia)}}</span></td><td><a ng-if=\\\"ciudad.archivo\\\" ng-click=\\\"vm.openFile(ciudad.archivoContentType, ciudad.archivo)\\\" translate=\\\"entity.action.open\\\">open</a> <span ng-if=\\\"ciudad.archivo\\\">{{ciudad.archivoContentType}}, {{vm.byteSize(ciudad.archivo)}}</span></td><td translate=\\\"{{\\'pru1App.Estado.\\' + ciudad.estados}}\\\">{{ciudad.estados}}</td><td><a ui-sref=\\\"pais-detail({id:ciudad.pais.id})\\\">{{ciudad.pais.paisNombre}}</a></td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"ciudad-detail({id:ciudad.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"ciudad.edit({id:ciudad.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"ciudad.delete({id:ciudad.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/entities/pais/pais-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.pais.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"pru1App.pais.delete.question\\\" translate-values=\\\"{id: \\'{{vm.pais.id}}\\'}\\\">Are you sure you want to delete this Pais?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/pais/pais-detail.html\",\"<div><h2><span translate=\\\"pru1App.pais.detail.title\\\">Pais</span> {{vm.pais.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\\\"dl-horizontal jh-entity-details\\\"><dt><span translate=\\\"pru1App.pais.paisId\\\">Pais Id</span></dt><dd><span>{{vm.pais.paisId}}</span></dd><dt><span translate=\\\"pru1App.pais.paisNombre\\\">Pais Nombre</span></dt><dd><span>{{vm.pais.paisNombre}}</span></dd></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/pais/pais-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myPaisLabel\\\" translate=\\\"pru1App.pais.home.createOrEditLabel\\\">Create or edit a Pais</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\" ng-show=\\\"vm.pais.id\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.pais.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.pais.paisId\\\" for=\\\"field_paisId\\\">Pais Id</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"paisId\\\" id=\\\"field_paisId\\\" ng-model=\\\"vm.pais.paisId\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"pru1App.pais.paisNombre\\\" for=\\\"field_paisNombre\\\">Pais Nombre</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"paisNombre\\\" id=\\\"field_paisNombre\\\" ng-model=\\\"vm.pais.paisNombre\\\" required ng-minlength=\\\"5\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.paisNombre.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.paisNombre.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.paisNombre.$error.minlength\\\" translate=\\\"entity.validation.minlength\\\" translate-value-min=\\\"5\\\">This field is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.paisNombre.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"50\\\">This field cannot be longer than 50 characters.</p></div></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || vm.isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/pais/pais.html\",\"<div><h2 translate=\\\"pru1App.pais.home.title\\\">Pais</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"pais.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span translate=\\\"pru1App.pais.home.createLabel\\\">Create new Pais</span></button></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"paisId\\\"><span translate=\\\"pru1App.pais.paisId\\\">Pais Id</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"paisNombre\\\"><span translate=\\\"pru1App.pais.paisNombre\\\">Pais Nombre</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"pais in vm.pais track by pais.id\\\"><td><a ui-sref=\\\"pais-detail({id:pais.id})\\\">{{pais.id}}</a></td><td>{{pais.paisId}}</td><td>{{pais.paisNombre}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"pais-detail({id:pais.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"pais.edit({id:pais.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"pais.delete({id:pais.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/layouts/error/accessdenied.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><span class=\\\"hipster img-responsive img-rounded\\\"></span></div><div class=\\\"col-md-8\\\"><h1 translate=\\\"error.title\\\">Error Page!</h1><div class=\\\"alert alert-danger\\\" translate=\\\"error.403\\\">You are not authorized to access the page.</div></div></div></div>\");\n$templateCache.put(\"app/layouts/error/error.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><span class=\\\"hipster img-responsive img-rounded\\\"></span></div><div class=\\\"col-md-8\\\"><h1 translate=\\\"error.title\\\">Error Page!</h1><div ng-show=\\\"errorMessage\\\"><div class=\\\"alert alert-danger\\\">{{errorMessage}}</div></div></div></div></div>\");\n$templateCache.put(\"app/layouts/navbar/navbar.html\",\"<nav class=\\\"navbar navbar-default\\\" role=\\\"navigation\\\"><div class=\\\"container\\\"><div class=\\\"navbar-header\\\"><button type=\\\"button\\\" class=\\\"navbar-toggle\\\" ng-click=\\\"vm.toggleNavbar()\\\"><span class=\\\"sr-only\\\">Toggle navigation</span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span></button> <a class=\\\"navbar-brand logo\\\" href=\\\"#/\\\" ng-click=\\\"vm.collapseNavbar()\\\"><img class=\\\"logo-img\\\" src=\\\"content/images/logo-jhipster.png\\\"> <span translate=\\\"global.title\\\">Pru1</span> <span class=\\\"navbar-version\\\">v{{VERSION}}</span></a></div><div class=\\\"navbar-collapse\\\" uib-collapse=\\\"vm.isNavbarCollapsed\\\" ng-switch=\\\"vm.isAuthenticated()\\\"><ul class=\\\"nav navbar-nav navbar-right\\\"><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"home\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-home\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.home\\\">Home</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\\\"{active: vm.$state.includes(\\'entity\\')}\\\" ng-switch-when=\\\"true\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"entity-menu\\\"><span><span class=\\\"glyphicon glyphicon-th-list\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.entities.main\\\">Entities </span><b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"pais\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp; <span translate=\\\"global.menu.entities.pais\\\">Pais</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"ciudad\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp; <span translate=\\\"global.menu.entities.ciudad\\\">Ciudad</span></a></li><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li><li ng-class=\\\"{active: vm.$state.includes(\\'account\\')}\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"account-menu\\\"><span><span class=\\\"glyphicon glyphicon-user\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.account.main\\\">Account </span><b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"settings\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-wrench\\\"></span>&nbsp; <span translate=\\\"global.menu.account.settings\\\">Settings</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"password\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-lock\\\"></span> <span translate=\\\"global.menu.account.password\\\">Password</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"sessions\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-cloud\\\"></span>&nbsp; <span translate=\\\"global.menu.account.sessions\\\">Sessions</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a href=\\\"\\\" ng-click=\\\"vm.logout()\\\" id=\\\"logout\\\"><span class=\\\"glyphicon glyphicon-log-out\\\"></span>&nbsp; <span translate=\\\"global.menu.account.logout\\\">Sign out</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"false\\\"><a href=\\\"\\\" ng-click=\\\"vm.login()\\\" id=\\\"login\\\"><span class=\\\"glyphicon glyphicon-log-in\\\"></span>&nbsp; <span translate=\\\"global.menu.account.login\\\">Sign in</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"false\\\"><a ui-sref=\\\"register\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-plus-sign\\\"></span>&nbsp; <span translate=\\\"global.menu.account.register\\\">Register</span></a></li></ul></li><li ng-class=\\\"{active: vm.$state.includes(\\'admin\\')}\\\" ng-switch-when=\\\"true\\\" has-authority=\\\"ROLE_ADMIN\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"admin-menu\\\"><span><span class=\\\"glyphicon glyphicon-tower\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.admin.main\\\">Administration</span> <b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"user-management\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-user\\\"></span>&nbsp; <span translate=\\\"global.menu.admin.userManagement\\\">User management</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-metrics\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-dashboard\\\"></span>&nbsp; <span translate=\\\"global.menu.admin.metrics\\\">Metrics</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-health\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-heart\\\"></span>&nbsp; <span translate=\\\"global.menu.admin.health\\\">Health</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-configuration\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-list-alt\\\"></span>&nbsp; <span translate=\\\"global.menu.admin.configuration\\\">Configuration</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"audits\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-bell\\\"></span>&nbsp; <span translate=\\\"global.menu.admin.audits\\\">Audits</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"logs\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-tasks\\\"></span>&nbsp; <span translate=\\\"global.menu.admin.logs\\\">Logs</span></a></li><li ng-hide=\\\"vm.inProduction || vm.swaggerDisabled\\\" ui-sref-active=\\\"active\\\"><a ui-sref=\\\"docs\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-book\\\"></span>&nbsp; <span translate=\\\"global.menu.admin.apidocs\\\">API</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --></ul></li><li ui-sref-active=\\\"active\\\" uib-dropdown class=\\\"dropdown pointer\\\" ng-controller=\\\"JhiLanguageController as languageVm\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" ng-if=\\\"languageVm.languages.length > 1\\\"><span><span class=\\\"glyphicon glyphicon-flag\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.language\\\">Language</span> <b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu ng-if=\\\"languageVm.languages.length > 1\\\"><li active-menu=\\\"{{language}}\\\" ng-repeat=\\\"language in languageVm.languages\\\"><a href=\\\"\\\" ng-click=\\\"languageVm.changeLanguage(language);vm.collapseNavbar();\\\">{{language | findLanguageFromKey}}</a></li></ul></li></ul></div></div></nav>\");\n$templateCache.put(\"app/account/reset/finish/reset.finish.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-4 col-md-offset-4\\\"><h1 translate=\\\"reset.finish.title\\\">Reset password</h1><div class=\\\"alert alert-danger\\\" translate=\\\"reset.finish.messages.keymissing\\\" ng-show=\\\"vm.keyMissing\\\"><strong>The password reset key is missing.</strong></div><div class=\\\"alert alert-warning\\\" ng-hide=\\\"vm.success || vm.keyMissing\\\"><p translate=\\\"reset.finish.messages.info\\\">Choose a new password</p></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><p translate=\\\"reset.finish.messages.error\\\">Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><p translate=\\\"reset.finish.messages.success\\\" translate-compile><strong>Your password has been reset.</strong> Please <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>.</p></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\" translate=\\\"global.messages.error.dontmatch\\\">The password and its confirmation do not match!</div><div ng-hide=\\\"vm.keyMissing\\\"><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.finishReset()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\" translate=\\\"global.form.newpassword\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"{{\\'global.form.newpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.resetAccount.password\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\" translate=\\\"global.messages.validate.newpassword.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\" translate=\\\"global.messages.validate.newpassword.minlength\\\">Your password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\" translate=\\\"global.messages.validate.newpassword.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.resetAccount.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\" translate=\\\"global.form.confirmpassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\" translate=\\\"global.messages.validate.confirmpassword.required\\\">Your password confirmation is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\" translate=\\\"global.messages.validate.confirmpassword.minlength\\\">Your password confirmation is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\" translate=\\\"global.messages.validate.confirmpassword.maxlength\\\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"reset.finish.form.button\\\">Reset Password</button></form></div></div></div></div>\");\n$templateCache.put(\"app/account/reset/request/reset.request.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1 translate=\\\"reset.request.title\\\">Reset your password</h1><div class=\\\"alert alert-danger\\\" translate=\\\"reset.request.messages.notfound\\\" ng-show=\\\"vm.errorEmailNotExists\\\"><strong>E-Mail address isn\\'t registered!</strong> Please check and try again.</div><div class=\\\"alert alert-warning\\\" ng-hide=\\\"vm.success\\\"><p translate=\\\"reset.request.messages.info\\\">Enter the e-mail address you used to register.</p></div><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success == \\'OK\\'\\\"><p translate=\\\"reset.request.messages.success\\\">Check your e-mails for details on how to reset your password.</p></div><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.requestReset()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\" translate=\\\"global.form.email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"{{\\'global.form.email.placeholder\\' | translate}}\\\" ng-model=\\\"vm.resetAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\" translate=\\\"global.messages.validate.email.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\" translate=\\\"global.messages.validate.email.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\" translate=\\\"global.messages.validate.email.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"reset.request.form.button\\\">Reset</button></form></div></div></div>\");}]);})();"],"sourceRoot":"/source/"}